<?php
/**
 * @file
 * Code for the Tripal JBrowse Tracks feature.
 */

include_once 'tripal_downloads.features.inc';

function tripal_downloads_organism_field_allowed_values() {

  $organisms = array();

  $results = chado_query('SELECT * FROM {organism} ORDER BY genus, species');

  while ($organism = $results->fetchObject()) {
    $organisms[$organism->organism_id] = sprintf('%s %s (%s)', $organism->genus, $organism->species, $organism->common_name);
  }

  return $organisms;

}

function tripal_downloads_track_type_field_allowed_values() {

  $track_types = array(
    'bam' => 'BAM',
    'bed' => 'BED',
    'gff3' => 'GFF3',
    'vcf' => 'VCF'
  );

  return $track_types;

}

function _download_type_to_track_type_properties($track_type) {

  $properties = array();

  switch($track_type) {
    case 'bam':
      $properties = array(
        'type' => 'JBrowse/View/Track/Alignments2',
        'trackType' => 'JBrowse/View/Track/Alignments2',
        'storeClass' => 'JBrowse/Store/SeqFeature/BAM',
      );
      break;
    case 'bed':
      $properties = array(
        'type' => 'JBrowse/View/Track/CanvasFeatures',
        'trackType' => 'JBrowse/View/Track/CanvasFeatures',
        'storeClass' => 'JBrowse/Store/SeqFeature/BEDTabix',
      );
      break;
    case 'gff3':
      $properties = array(
        'type' => 'JBrowse/View/Track/CanvasFeatures',
        'trackType' => 'JBrowse/View/Track/CanvasFeatures',
        'storeClass' => 'JBrowse/Store/SeqFeature/GFF3Tabix',
      );
      break;
    case 'vcf':
      $properties = array(
        'type' => 'JBrowse/View/Track/CanvasVariants',
        'trackType' => 'JBrowse/View/Track/CanvasVariants',
        'storeClass' => 'JBrowse/Store/SeqFeature/VCFTabix',
      );
      break;
    default:
      break;
  }

  return $properties;

}

/**
 * Implements hook_jbrowse_tracks().
 */
function tripal_downloads_jbrowse_tracks($organism) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'download');
  $query->propertyCondition('status', 1);
  $query->fieldCondition('field_download_is_jbrowse_track', 'value', 1);
  $query->fieldCondition('field_download_organism', 'value', $organism->organism_id);

  $results = $query->execute();

  $node_ids = array();

  if (!empty($results['node'])) {
    $node_ids = array_keys($results['node']);
  }

  $data = array();

  foreach (node_load_multiple($node_ids) as $node) {

    $description = '';
    if (!empty($node->field_download_description[LANGUAGE_NONE][0]['safe_value'])) {
      $description = $node->field_download_description[LANGUAGE_NONE][0]['safe_value'];
    }

    $track_type_properties = _download_type_to_track_type_properties($node->field_download_type[LANGUAGE_NONE][0]['value']);

    $category = 'Other';

    if (!empty($node->field_download_category[LANGUAGE_NONE])) {
      $category_term = taxonomy_term_load($node->field_download_category[LANGUAGE_NONE][0]['tid']);
      $category = $category_term->name;
    }

    $track = array(
      'category' => $category,
      'label' => $node->nid,
      'key' => $node->title,
      'urlTemplate' => file_create_url($node->field_download_file[LANGUAGE_NONE][0]['uri']),
      'metadata' => array(
        'Description' => $description,
      )
    ) + $track_type_properties;

    $data[] = $track;

  }

  return $data;

}
